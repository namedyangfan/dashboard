{"version":3,"sources":["components/nav_sidebar.js","components/plot_time_series.js","components/plot_content.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["NavSideBar","renderGaugeStationFilter","react_default","a","createElement","dist_default","options","value","label","onChange","_this","props","handleChangeStation","site_number","placeholder","placeholderClassName","menuClassName","renderTimeIntervalFilter","handleChangeDayInterval","days_interval","className","this","React","Component","PlotTimeSeries","renderPlotFlow","data","y","x","date","type","mode","marker","color","react_plotly_default","layout","responsive","xaxis","title","titlefont","family","size","yaxis","automargin","style","width","height","useResizeHandler","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","Tab","tabLabel","classNames","grey-text","activeTab","active-tab","blue-text text-lighten-2","onClick","labelClass","font","marginLeft","PlotContent","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","url","concat","axios","get","then","response","sortValueDate","setState","isLoaded","catch","error","console","log","changeActivetAB","state","timeSeries","values","_","map","sourceInfo","geoLocation","geogLocation","latitude","longitude","station_name","siteName","renderleafletMap","position","Map","center","zoom","TileLayer","attribution","Marker","Popup","renderContent","plot_time_series_PlotTimeSeries","prevProps","prevState","_this3","class","plot_content_Tab","App","e","renderNavBar","href","id","nav_sidebar_NavSideBar","plot_content_PlotContent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.0808d898.chunk.js","sourcesContent":["import React from 'react'\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css'\n\nexport default class NavSideBar extends React.Component {\n\n  renderGaugeStationFilter = () => {\n    let options = [\n      { value: '08313000', label : 'RIO GRANDE AT OTOWI BRIDGE'},\n      { value: '08317200', label : 'SANTA FE RIVER ABOVE COCHITI LAKE'},\n      { value: '08378500', label : 'PECOS RIVER NEAR PECOS'},\n    ]\n\n    return(\n      <Dropdown options={options} onChange={this.props.handleChangeStation} value={this.props.site_number} placeholder=\"Select an option\" \n        placeholderClassName='dropDownPlaceHolder' menuClassName='dropDownPlaceHolder'/>\n    )\n  }\n\n  renderTimeIntervalFilter = () => {\n    let options = [\n      { value: '10', label : 'pass 10 days'},\n      { value: '20', label : 'pass 20 days'},\n      { value: '30', label : 'pass 30 days'},\n    ]\n\n    return(\n      <Dropdown options={options} onChange={this.props.handleChangeDayInterval} value={this.props.days_interval} placeholder=\"Select an option\" \n        placeholderClassName='dropDownPlaceHolder' menuClassName='dropDownPlaceHolder'/>\n    )\n  }\n\n  render() {\n\n\n    return (\n        <div className=\"section\">\n          <h7> Select Gauge Station </h7>\n          {this.renderGaugeStationFilter()}\n          <h7> Select Duration </h7>\n          {this.renderTimeIntervalFilter()}\n        </div>\n      );\n  }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Plot from 'react-plotly.js';\n\n\nexport default class PlotTimeSeries extends React.Component {\n\n  renderPlotFlow = () => {\n    const layout = {\n      responsive: true,\n      xaxis: {\n           title: 'Date',\n           titlefont: {\n               family: 'Courier New, monospace',\n               size: 18,\n               color: '#7f7f7f'\n           }\n      },\n      yaxis: {\n           title: 'Discharge Rate ft3/s',\n           automargin: true,\n           titlefont: {\n               family: 'Courier New, monospace',\n               size: 18,\n               color: '#7f7f7f'\n           }\n      },\n\n    }\n\n    const data = {\n      y: this.props.value,\n      x: this.props.date,\n      type: 'scatter',\n      mode: 'lines+points',\n      marker: {color: 'red'}\n    }\n\n    return(\n      <Plot data = {[ data ]} layout = { layout } style = {[{width: \"100%\", height: \"100%\"}]}\n        useResizeHandler = 'true'\n      />\n    );\n  }\n\n  render() {\n    return (\n      this.renderPlotFlow()\n    )\n  }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Plot from 'react-plotly.js';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\nimport L from 'leaflet';\nimport PlotTimeSeries from './plot_time_series'\nimport classNames from 'classnames'\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\nclass Tab extends React.Component {\n  render(){\n    const tabLabel = this.props.tabLabel\n    const className = classNames (\n      {\n        'grey-text' : tabLabel !== this.props.activeTab,\n        'active-tab': tabLabel == this.props.activeTab,\n        'blue-text text-lighten-2': tabLabel == this.props.activeTab\n      }\n    )\n\n    return (\n      <li className='tab col s3 offset-s1' onClick={() => {this.props.onClick(tabLabel)}}> \n        <a className={className}>\n          <i className={this.props.labelClass} style={{font : 15}}></i>\n          <span style={{marginLeft : 10}}>{tabLabel}</span>\n        </a>\n      </li>\n    )\n  }\n}\n\nexport default class PlotContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      value: [],\n      date: [],\n      latitude: null,\n      longitude: null,\n      zoom: 13,\n      station_name: null,\n      activeTab: 'Map'\n    };\n  }\n\n  componentDidMount() {\n    this.getData()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n        if (prevProps.site_number !== this.props.site_number || prevProps.days_interval !== this.props.days_interval) {\n            this.setState({\n              isLoaded: false\n            }, \n            () => this.getData()\n            )\n        }\n  }\n\n  getData = () => {\n    // parameterCd=00060: discharge in cubic feet per second\n    const url = `https://waterservices.usgs.gov/nwis/iv/?sites=${this.props.site_number}&period=P${this.props.days_interval}D&&parameterCd=00060&format=json`\n    axios.get(url)\n      .then( (response) => {\n        // handle success\n        this.sortValueDate(response)\n        this.setState({\n          isLoaded: true\n        })\n      })\n      .catch( (error) => {\n        // handle error\n        console.log(error);\n      })\n  }\n\n  changeActivetAB = (tabLabel) => {\n    console.log(tabLabel)\n    if (this.state.activeTab !== tabLabel){\n      this.setState({\n        activeTab : tabLabel\n      })\n    }\n\n  }\n\n  sortValueDate = (response) => {\n    // console.log( response.data.value.timeSeries[0].values[0].value )\n\n    const data = response.data.value.timeSeries[0].values[0].value \n\n    const value = _.map(data, 'value')\n    const date = _.map(data, 'dateTime')\n    console.log(response.data.value.timeSeries[0].sourceInfo.geoLocation.geogLocation)\n    this.setState({\n      value: value,\n      date: date,\n      latitude: response.data.value.timeSeries[0].sourceInfo.geoLocation.geogLocation.latitude,\n      longitude: response.data.value.timeSeries[0].sourceInfo.geoLocation.geogLocation.longitude,\n      station_name: response.data.value.timeSeries[0].sourceInfo.siteName\n    })\n  }\n\n  renderleafletMap = () => {\n    const position = [this.state.latitude, this.state.longitude]\n    // const position = [51.1, -0.09]\n\n    return (\n        <Map center={position} zoom={this.state.zoom}>\n          <TileLayer\n            url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n          <Marker position={position}>\n            <Popup>\n              <span>Station: {this.state.station_name}</span>\n            </Popup>\n          </Marker>\n        </Map>\n    )\n\n  }\n\n  renderContent = () => {\n    \n    if (this.state.activeTab == 'Map') {\n      return(\n        <div className=\"col s12\">\n          <div className= \"section\">\n            <span> Station Number: {this.props.site_number} </span>\n            <span> Latitude: {this.state.latitude} </span>\n            <span> Longitude: {this.state.longitude} </span>\n            {this.renderleafletMap()}\n          </div>\n        </div>\n      )\n    }\n    return (\n      <div className=\"col s12\">\n        <div className=\"plotly-container\">\n\n          <PlotTimeSeries value={this.state.value} date={this.state.date}/>        \n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n        <div className=\"section\">\n            <div className=\"row\">\n              <div class=\"col s12\">\n                <ul className=\"tabs\">\n                  <Tab tabLabel=\"Map\" onClick={this.changeActivetAB} activeTab={this.state.activeTab} labelClass=\"fas fa-globe-americas fa-lg\"/>\n                  <Tab tabLabel=\"Plot\" onClick={this.changeActivetAB} activeTab={this.state.activeTab} labelClass=\"fas fa-chart-line fa-lg\"/>\n                </ul>\n              </div>\n              {this.state.isLoaded?(\n                this.renderContent()\n               ):(\n                <div className=\"col 12 offset-s7 loader\">\n                  <div className=\"preloader-wrapper big active \">\n                    <div className=\"spinner-layer spinner-blue-only\">\n                      <div className=\"circle-clipper left\">\n                        <div className=\"circle\"></div>\n                      </div><div className=\"gap-patch\">\n                        <div className=\"circle\"></div>\n                      </div><div className=\"circle-clipper right\">\n                        <div className=\"circle\"></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n               )\n              }\n            </div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NavSideBar from './components/nav_sidebar';\nimport PlotContent from './components/plot_content';\nimport 'leaflet/dist/leaflet.css'\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      site_number : '08313000',\n      days_interval : '10'\n    }\n  }\n\n  handleChangeStation = (e) => {\n    console.log(e)\n    this.setState({\n      site_number : e.value\n    },\n    () => console.log('site_number: ' + this.state.site_number)\n    )\n\n  }\n\n\n  handleChangeDayInterval = (e) => {\n    console.log(e)\n    this.setState({\n      days_interval : e.value\n    },\n    () => console.log('days_interval: ' + this.state.days_interval)\n    )\n\n  }\n\n  renderNavBar = () =>{\n    return(\n      <nav>\n        <div className=\"nav-wrapper blue\">\n          <a href=\"#\" className=\"brand-logo\">Demo SPA</a>\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n            <li>\n              <a href=\"https://github.com/namedyangfan/dashboard\">\n                <i className=\"fab fa-github\"></i> \n              </a>\n            </li>\n            <li>\n              <a href=\"https://www.linkedin.com/in/fanyangcanada/\">\n                <i className=\"fab fa-linkedin\"></i> \n              </a>\n              </li>\n          </ul>\n        </div>\n      </nav>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderNavBar()}\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col s12 m3\">\n              <NavSideBar site_number={this.state.site_number} handleChangeStation={this.handleChangeStation} days_interval={this.state.days_interval}\n                handleChangeDayInterval={this.handleChangeDayInterval}/>\n            </div>\n            <div className=\"col s12 m9\">\n              <div className=\"card\">\n                <PlotContent site_number={this.state.site_number} days_interval={this.state.days_interval}/>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrequire('materialize-css/dist/js/materialize.js');\nrequire('materialize-css/dist/css/materialize.min.css');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}