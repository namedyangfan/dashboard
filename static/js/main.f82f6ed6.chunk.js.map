{"version":3,"sources":["logo.svg","components/nav_sidebar.js","components/plot_content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavSideBar","renderGaugeStationFilter","react_default","a","createElement","dist_default","options","value","label","onChange","_this","props","handleChangeStation","site_number","placeholder","placeholderClassName","menuClassName","renderTimeIntervalFilter","handleChangeDayInterval","days_interval","className","this","React","Component","PlotContent","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","url","concat","axios","get","then","response","sortValueDate","setState","isLoaded","catch","error","console","log","data","timeSeries","values","_","map","date","sourceInfo","geoLocation","geogLocation","latitude","longitude","station_name","siteName","renderPlotFlow","react_plotly_default","y","state","x","type","mode","marker","color","layout","width","height","title","xaxis","titlefont","family","size","yaxis","prevProps","prevState","_this2","App","e","renderNavBar","href","id","nav_sidebar_NavSideBar","plot_content_PlotContent","Boolean","window","location","hostname","match","require","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f82f6ed6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css'\n\nexport default class NavSideBar extends React.Component {\n\n  renderGaugeStationFilter = () => {\n    let options = [\n      { value: '08313000', label : 'RIO GRANDE AT OTOWI BRIDGE'},\n      { value: '08317200', label : 'SANTA FE RIVER ABOVE COCHITI LAKE'},\n      { value: '08378500', label : 'PECOS RIVER NEAR PECOS'},\n    ]\n\n    return(\n      <Dropdown options={options} onChange={this.props.handleChangeStation} value={this.props.site_number} placeholder=\"Select an option\" \n        placeholderClassName='dropDownPlaceHolder' menuClassName='dropDownPlaceHolder'/>\n    )\n  }\n\n  renderTimeIntervalFilter = () => {\n    let options = [\n      { value: '10', label : 'pass 10 days'},\n      { value: '20', label : 'pass 20 days'},\n      { value: '30', label : 'pass 30 days'},\n    ]\n\n    return(\n      <Dropdown options={options} onChange={this.props.handleChangeDayInterval} value={this.props.days_interval} placeholder=\"Select an option\" \n        placeholderClassName='dropDownPlaceHolder' menuClassName='dropDownPlaceHolder'/>\n    )\n  }\n\n  render() {\n\n\n    return (\n        <div className=\"section\">\n          <h7> Select Gauge Station </h7>\n          {this.renderGaugeStationFilter()}\n          <h7> Select Duration </h7>\n          {this.renderTimeIntervalFilter()}\n        </div>\n      );\n  }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Plot from 'react-plotly.js';\n\nexport default class PlotContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      value: [],\n      date: [],\n      latitude: null,\n      longitude: null\n    };\n  }\n\n  componentDidMount() {\n    this.getData()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n        if (prevProps.site_number !== this.props.site_number || prevProps.days_interval !== this.props.days_interval) {\n            this.setState({\n              isLoaded: false\n            }, \n            () => this.getData()\n            )\n        }\n  }\n\n  getData = () => {\n    const url = `https://waterservices.usgs.gov/nwis/iv/?sites=${this.props.site_number}&period=P${this.props.days_interval}D&format=json`\n    axios.get(url)\n      .then( (response) => {\n        // handle success\n        this.sortValueDate(response)\n        this.setState({\n          isLoaded: true\n        })\n      })\n      .catch( (error) => {\n        // handle error\n        console.log(error);\n      })\n  }\n\n  sortValueDate = (response) => {\n    // console.log( response.data.value.timeSeries[0].values[0].value )\n\n    const data = response.data.value.timeSeries[0].values[0].value \n\n    const value = _.map(data, 'value')\n    const date = _.map(data, 'dateTime')\n    console.log(response.data.value.timeSeries[0].sourceInfo.geoLocation.geogLocation)\n    this.setState({\n      value: value,\n      date: date,\n      latitude: response.data.value.timeSeries[0].sourceInfo.geoLocation.geogLocation.latitude,\n      longitude: response.data.value.timeSeries[0].sourceInfo.geoLocation.geogLocation.longitude,\n      station_name: response.data.value.timeSeries[0].sourceInfo.siteName\n    })\n  }\n\n  renderPlotFlow = () => {\n\n    return(\n      <Plot\n        data={[\n          {\n            y: this.state.value,\n            x: this.state.date,\n            type: 'scatter',\n            mode: 'lines+points',\n            marker: {color: 'red'},\n          }\n        ]}\n\n        layout={ \n          {\n            width: 700, \n            height: 500, \n            title: `Discharge Profile for Station ${this.state.station_name}`,\n            xaxis: {\n                 title: 'Date',\n                 titlefont: {\n                     family: 'Courier New, monospace',\n                     size: 18,\n                     color: '#7f7f7f'\n                 }\n            },\n            yaxis: {\n                 title: 'Discharge Rate ft3/s',\n                 titlefont: {\n                     family: 'Courier New, monospace',\n                     size: 18,\n                     color: '#7f7f7f'\n                 }\n            }\n\n          }\n        } \n\n      />\n    );\n  }\n\n\n  render() {\n    return (\n      this.state.isLoaded?(\n        <div className=\"section\">\n          <span> Station Number: {this.props.site_number} </span>\n          <div> latitude: {this.state.latitude} </div>\n          <div> longitude: {this.state.longitude} </div>\n            {this.renderPlotFlow()}\n        </div>\n      ):(\n        <div className=\"col offset-s6\">\n          <div className=\"preloader-wrapper big active\">\n            <div className=\"spinner-layer spinner-blue-only\">\n              <div className=\"circle-clipper left\">\n                <div className=\"circle\"></div>\n              </div><div className=\"gap-patch\">\n                <div className=\"circle\"></div>\n              </div><div className=\"circle-clipper right\">\n                <div className=\"circle\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NavSideBar from './components/nav_sidebar';\nimport PlotContent from './components/plot_content';\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      site_number : '08313000',\n      days_interval : '10'\n    }\n  }\n\n  handleChangeStation = (e) => {\n    console.log(e)\n    this.setState({\n      site_number : e.value\n    },\n    () => console.log('site_number: ' + this.state.site_number)\n    )\n\n  }\n\n\n  handleChangeDayInterval = (e) => {\n    console.log(e)\n    this.setState({\n      days_interval : e.value\n    },\n    () => console.log('days_interval: ' + this.state.days_interval)\n    )\n\n  }\n\n  renderNavBar = () =>{\n    return(\n      <nav>\n        <div className=\"nav-wrapper blue\">\n          <a href=\"#\" className=\"brand-logo\">Demo SPA</a>\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n            <li>\n              <a href=\"https://www.linkedin.com/in/fanyangcanada/\">\n                <i className=\"fab fa-linkedin\"> Fan Yang</i> \n              </a>\n              </li>\n          </ul>\n        </div>\n      </nav>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderNavBar()}\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col s3\">\n              <NavSideBar site_number={this.state.site_number} handleChangeStation={this.handleChangeStation} days_interval={this.state.days_interval}\n                handleChangeDayInterval={this.handleChangeDayInterval}/>\n            </div>\n            <div className=\"col s6\">\n              <PlotContent site_number={this.state.site_number} days_interval={this.state.days_interval}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrequire('materialize-css/dist/js/materialize.js');\nrequire('materialize-css/dist/css/materialize.min.css');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}