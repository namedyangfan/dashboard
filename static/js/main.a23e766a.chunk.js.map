{"version":3,"sources":["logo.svg","components/nav_sidebar.js","components/plot_content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavSideBar","renderTimeInterval","defaultOption","_this","props","site_number","react_default","a","createElement","dist_default","options","value","label","onChange","handleChangeInterval","placeholder","className","this","React","Component","PlotContent","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","url","concat","axios","get","then","response","sortValueDate","setState","isLoaded","catch","error","console","log","data","timeSeries","values","_","map","date","renderPlotFlow","react_plotly_default","y","state","x","type","mode","marker","color","layout","width","height","title","prevProps","prevState","_this2","App","e","renderNavBar","href","id","nav_sidebar_NavSideBar","plot_content_PlotContent","Boolean","window","location","hostname","match","require","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a23e766a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css'\n\nexport default class NavSideBar extends React.Component {\n\n  renderTimeInterval = () => {\n    const options = [\n      { value: '08313000', label : 'RIO GRANDE AT OTOWI BRIDGE'},\n      { value: '08317200', label : 'SANTA FE RIVER ABOVE COCHITI LAKE'},\n      { value: '08378500', label : 'PECOS RIVER NEAR PECOS'},\n\n    ]\n\n    const defaultOption = this.props.site_number\n\n    return(\n      <Dropdown options={options} onChange={this.props.handleChangeInterval} value={defaultOption} placeholder=\"Select an option\" />\n    )\n  }\n\n  render() {\n\n\n    return (\n        <div className=\"section\">\n          <h7> Select Gauge Station </h7>\n          {this.renderTimeInterval()}\n        </div>\n      );\n  }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Plot from 'react-plotly.js';\n\nexport default class PlotContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      value: [],\n      date: []\n    };\n  }\n\n  componentDidMount() {\n    this.getData()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n        if (prevProps.site_number !== this.props.site_number) {\n            this.setState({\n              isLoaded: false\n            }, \n            () => this.getData()\n            )\n        }\n  }\n\n  getData = () => {\n    const url = `https://waterservices.usgs.gov/nwis/iv/?sites=${this.props.site_number}&period=P7D&format=json`\n    axios.get(url)\n      .then( (response) => {\n        // handle success\n        this.sortValueDate(response)\n        this.setState({\n          isLoaded: true\n        })\n      })\n      .catch( (error) => {\n        // handle error\n        console.log(error);\n      })\n  }\n\n  sortValueDate = (response) => {\n    // console.log( response.data.value.timeSeries[0].values[0].value )\n\n    const data = response.data.value.timeSeries[0].values[0].value \n\n    const value = _.map(data, 'value')\n    const date = _.map(data, 'dateTime')\n\n    this.setState({\n      value: value,\n      date: date\n    })\n  }\n\n  renderPlotFlow = () => {\n\n    return(\n      <Plot\n        data={[\n          {\n            y: this.state.value,\n            x: this.state.date,\n            type: 'scatter',\n            mode: 'lines+points',\n            marker: {color: 'red'},\n          },\n        ]}\n        layout={ {width: 700, height: 500, title: 'A Fancy Plot'} }\n      />\n    );\n  }\n\n\n  render() {\n    return (\n      this.state.isLoaded?(\n        <div className=\"section\">\n          the selected station number is: {this.props.site_number}\n            {this.renderPlotFlow()}\n        </div>\n      ):(\n        <div className=\"col offset-s6\">\n          <div className=\"preloader-wrapper big active\">\n            <div className=\"spinner-layer spinner-blue-only\">\n              <div className=\"circle-clipper left\">\n                <div className=\"circle\"></div>\n              </div><div className=\"gap-patch\">\n                <div className=\"circle\"></div>\n              </div><div className=\"circle-clipper right\">\n                <div className=\"circle\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NavSideBar from './components/nav_sidebar';\nimport PlotContent from './components/plot_content';\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      site_number : '08313000'\n    }\n  }\n\n  handleChangeInterval = (e) => {\n    this.setState({\n      site_number : e.value\n    },\n    () => console.log('site_number: ' + this.state.site_number)\n    )\n\n  }\n\n  renderNavBar = () =>{\n    return(\n      <nav>\n        <div className=\"nav-wrapper\">\n          <a href=\"#\" className=\"brand-logo\">Logo</a>\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n            <li><a href=\"sass.html\">Sass</a></li>\n            <li><a href=\"badges.html\">Components</a></li>\n            <li><a href=\"collapsible.html\">JavaScript</a></li>\n          </ul>\n        </div>\n      </nav>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderNavBar()}\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col s4\">\n              <NavSideBar site_number={this.state.site_number} handleChangeInterval={this.handleChangeInterval}/>\n            </div>\n            <div className=\"col s8\">\n              <PlotContent site_number={this.state.site_number}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrequire('materialize-css/dist/js/materialize.js');\nrequire('materialize-css/dist/css/materialize.min.css');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}